{"version":3,"file":"static/js/482.17df0d72.chunk.js","mappings":"gRAQMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJG,IAAI,IACJC,IAAI,IACJC,QACC,kFACA,+DAEDH,QACAI,WACHC,SAAUP,EAAAA,KAEPG,IAAI,GACJC,IAAI,IACJC,QACC,iBACA,qDAEDC,aAGCE,EAAgB,CACpBN,MAAO,GACPK,SAAU,IA+BZ,EA5BkB,WAChB,IAAME,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQR,OACE,SAAC,KAAM,CACLH,cAAeA,EACfM,iBAAkBf,EAClBgB,SAViB,SAACC,EAAO,GAAoB,IAAjBC,EAAS,EAATA,UACtBf,EAAoBc,EAApBd,MAAOK,EAAaS,EAAbT,SACfE,GAASS,EAAAA,EAAAA,IAAU,CAAEhB,MAAOA,EAAOK,SAAUA,KAC7CU,GACF,EAM2B,UAEvB,UAAC,KAAI,YACH,SAAC,KAAK,CAACE,KAAK,QAAQC,KAAK,QAAQC,YAAY,WAC7C,SAAC,KAAY,CAACC,UAAU,MAAMF,KAAK,WACnC,mBACA,SAAC,KAAK,CAACD,KAAK,WAAWC,KAAK,WAAWC,YAAY,cACnD,SAAC,KAAY,CAACC,UAAU,MAAMF,KAAK,cACnC,mBAAQD,KAAK,SAAQ,SAAGR,GAAsB,SAAC,KAAM,IAAjB,cAI5C,E,UC7CA,MAZA,WACE,OACE,4BACE,wBAAI,WACJ,SAAC,EAAS,KACV,yBAAG,2BACsB,SAAC,KAAI,CAACY,GAAG,YAAW,SAAC,kBAIpD,C","sources":["components/LoginForm/LoginForm.js","pages/LoginPage.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAuth } from 'redux/auth/authSelectors';\nimport { loginUser } from 'redux/auth/authOperations';\n\nimport { Loader } from 'components';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .min(10)\n    .max(63)\n    .matches(\n      /^[^-n]+[a-zA-Z0-9.,!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9]+)*$/,\n      'Email must not contain the \"-\" as a first or last character'\n    )\n    .email()\n    .required(),\n  password: yup\n    .string()\n    .min(7)\n    .max(32)\n    .matches(\n      /^[a-zA-Z0-9]*$/,\n      'Password must contain only letters and/or numbers'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    dispatch(loginUser({ email: email, password: password }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n        <ErrorMessage component=\"div\" name=\"email\" />\n        <br />\n        <Field type=\"password\" name=\"password\" placeholder=\"Password\" />\n        <ErrorMessage component=\"div\" name=\"password\" />\n        <button type=\"submit\">{!isLoading ? 'Login' : <Loader />}</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default LoginForm;","import React from 'react';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport { Link } from 'react-router-dom';\n\nfunction LoginPage() {\n  return (\n    <div>\n      <h2>Login</h2>\n      <LoginForm />\n      <p>\n        Don't have an account? <Link to=\"/register\">Register</Link>\n      </p>\n    </div>\n  );\n}\n\nexport default LoginPage;\n"],"names":["schema","yup","shape","email","min","max","matches","required","password","initialValues","dispatch","useDispatch","isLoading","useSelector","getAuth","validationSchema","onSubmit","values","resetForm","loginUser","type","name","placeholder","component","to"],"sourceRoot":""}