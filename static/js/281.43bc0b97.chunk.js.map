{"version":3,"file":"static/js/281.43bc0b97.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.js","pages/RegisterPage.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuth } from 'redux/auth/authSelectors';\nimport { registerUser } from 'redux/auth/authOperations';\n\nimport { Loader } from 'components';\n\nconst RegisterForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [name, setName] = useState('');\n  const [city, setCity] = useState('');\n  const [phone, setPhone] = useState('');\n  const [firstPart, setFirstPart] = useState(true);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'userEmail':\n        setEmail(value);\n        break;\n      case 'userPassword':\n        setPassword(value);\n        break;\n      case 'confirmPassword':\n        setConfirmPassword(value);\n        break;\n      case 'userName':\n        setName(value);\n        break;\n      case 'userCity':\n        setCity(value);\n        break;\n      case 'userPhone':\n        setPhone(value);\n        break;\n      default:\n        setEmail('');\n        setPassword('');\n        setConfirmPassword('');\n        setName('');\n        setCity('');\n        setPhone('');\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(\n      registerUser({\n        email: email,\n        password: password,\n        name: name,\n        city: city,\n        phone: phone,\n      })\n    );\n  };\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n  const confirmPasswordId = useMemo(() => nanoid(), []);\n  const nameId = useMemo(() => nanoid(), []);\n  const cityId = useMemo(() => nanoid(), []);\n  const phoneId = useMemo(() => nanoid(), []);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {firstPart ? (\n        <div>\n          <input\n            id={emailId}\n            type=\"email\"\n            name=\"userEmail\"\n            value={email}\n            onChange={handleChange}\n            required\n            placeholder=\"Email\"\n          />\n          <input\n            id={passwordId}\n            type=\"password\"\n            name=\"userPassword\"\n            value={password}\n            onChange={handleChange}\n            required\n            placeholder=\"Password\"\n          />\n          <input\n            id={confirmPasswordId}\n            type=\"password\"\n            name=\"confirmPassword\"\n            value={confirmPassword}\n            onChange={handleChange}\n            required\n            placeholder=\"Confirm Password\"\n          />\n          <button type=\"button\" onClick={() => setFirstPart(false)}>\n            Next\n          </button>\n        </div>\n      ) : (\n        <div>\n          <input\n            id={nameId}\n            type=\"text\"\n            name=\"userName\"\n            value={name}\n            onChange={handleChange}\n            required\n            placeholder=\"Name\"\n          />\n          <input\n            id={cityId}\n            type=\"text\"\n            name=\"userCity\"\n            value={city}\n            onChange={handleChange}\n            required\n            placeholder=\"City, region\"\n          />\n          <input\n            id={phoneId}\n            type=\"tel\"\n            name=\"userPhone\"\n            value={phone}\n            onChange={handleChange}\n            required\n            placeholder=\"Mobile phone\"\n          />\n          {!isLoading ? <button type=\"submit\">Register</button> : <Loader />}\n          <button type=\"button\" onClick={() => setFirstPart(true)}>\n            Back\n          </button>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import React from 'react';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { Link } from 'react-router-dom';\n\nfunction RegisterPage() {\n  return (\n    <div>\n      <RegisterForm />\n      <p>\n        Already have an account? <Link to=\"/login\">Login</Link>\n      </p>\n    </div>\n  );\n}\n\nexport default RegisterPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","name","setName","city","setCity","phone","setPhone","firstPart","setFirstPart","handleChange","e","target","value","dispatch","useDispatch","isLoading","useSelector","getAuth","emailId","useMemo","nanoid","passwordId","confirmPasswordId","nameId","cityId","phoneId","onSubmit","preventDefault","registerUser","id","type","onChange","required","placeholder","onClick","to","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}