{"version":3,"file":"static/js/710.d230c01d.chunk.js","mappings":"8PAEaA,EAAQC,EAAAA,EAAAA,MAAY,8kBAgCpBC,EAAYD,EAAAA,EAAAA,IAAU,yFAMtBE,EAASF,EAAAA,EAAAA,OAAa,kPACb,SAAAG,GAAK,OAAKA,EAAMC,MAAQ,UAAY,MAAM,IACrD,SAAAD,GAAK,OAAKA,EAAMC,MAAQ,OAAS,MAAM,G,qSCpCrCC,EAAaL,EAAAA,EAAAA,IAAU,0lBAKVM,EAWEC,EAMAC,GAIfC,EAAiBT,EAAAA,EAAAA,IAAU,kcAqB3BU,EAAWV,EAAAA,EAAAA,EAAQ,iI,0KC5C1BW,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJG,IAAI,IACJC,IAAI,IACJC,QACC,kFACA,+DAEDH,QACAI,WACHC,SAAUP,EAAAA,KAEPG,IAAI,GACJC,IAAI,IACJC,QACC,iBACA,qDAEDC,aAGCE,EAAgB,CACpBN,MAAO,GACPK,SAAU,IA4CZ,EAzCkB,WAChB,IAAME,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAWR,OACE,SAAC,KAAM,CACLH,cAAeA,EACfM,iBAAkBf,EAClBgB,SAbiB,SAACC,EAAO,GAAoB,IAAjBC,EAAS,EAATA,UACtBf,EAAoBc,EAApBd,MAAOK,EAAaS,EAAbT,SAEf,GADiBE,GAASS,EAAAA,EAAAA,IAAU,CAAEhB,MAAOA,EAAOK,SAAUA,KACjDY,QACX,OAAO,SAAC,KAAQ,CAACC,GAAG,QAAQC,SAAO,IAErCJ,GACF,EAM2B,UAEvB,UAAC,KAAI,YACH,SAAC,KAAK,CAACK,KAAK,QAAQC,KAAK,QAAQC,YAAY,QAAQC,GAAItC,EAAAA,MACzD,SAAC,KAAY,CAACoC,KAAK,QAAO,SACvB,SAAAG,GAAG,OAAI,SAAC,IAAS,UAAEA,GAAgB,KAEtC,SAAC,KAAK,CACJJ,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,GAAItC,EAAAA,MAEN,SAAC,KAAY,CAACoC,KAAK,WAAU,SAC1B,SAAAG,GAAG,OAAI,SAAC,IAAS,UAAEA,GAAgB,KAEtC,SAAC,KAAM,CAAClC,MAAM,SAAS8B,KAAK,SAAQ,SAChCX,GAAsB,SAAC,KAAM,IAAjB,cAKxB,E,6BCpDA,ICrBA,EDKA,WACE,OACE,SAAC,KAAU,WACT,UAAC,KAAc,YACb,SAACgB,EAAA,EAAU,CAACC,GAAI,CAAEC,UAAW,SAAUC,GAAI,QAAUC,QAAQ,KAAI,SAAC,WAGlE,SAAC,EAAS,KACV,UAAC,KAAQ,WAAC,2BACe,SAAC,KAAI,CAACX,GAAG,YAAW,SAAC,oBAKtD,C","sources":["components/RegisterForm/Forms.styled.js","pages/LoginPage/LoginPage.styled.js","components/LoginForm/LoginForm.js","pages/LoginPage/LoginPage.js","pages/LoginPage/index.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  background-color: #fdf7f2;\n  width: 100%;\n  height: 40px;\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  padding: 0 32px;\n  margin-bottom: 16px;\n\n  &::placeholder {\n    font-family: 'Manrope';\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 1.36;\n    letter-spacing: 0.04em;\n    color: rgba(17, 17, 17, 0.6);\n  }\n\n  &:last-child {\n    margin-bottom: 40px;\n  }\n\n  @media screen and (min-width: 768px) {\n    height: 52px;\n\n    &::placeholder {\n      font-size: 18px;\n      line-height: 25px;\n    }\n  }\n`;\n\nexport const ErrorText = styled.div`\n  padding: 5px 20px;\n  margin-bottom: 10px;\n  color: #f59256;\n`;\n\nexport const Button = styled.button`\n  background-color: ${props => (props.color ? '#f59256' : '#fff')};\n  color: ${props => (props.color ? '#fff' : '#000')};\n  border: 2px solid #f59256;\n  border-radius: 40px;\n  width: 100%;\n  height: 44px;\n  margin-top: 16px;\n\n  @media screen and (min-width: 1280px) {\n    height: 48px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport mobile from '../../assets/backgrounds/mobile.png';\nimport tablet from '../../assets/backgrounds/tablet.png';\nimport desktop from '../../assets/backgrounds/desktop.png';\n\nexport const Background = styled.div`\n  width: 100%;\n  height: 100vh;\n  padding-top: 100px;\n  background-color: #fdf7f2;\n  background-image: url(${mobile});\n  background-size: 100% 160px;\n  background-repeat: no-repeat;\n  background-position: bottom;\n  background-size: contain;\n  background-attachment: fixed;\n  overflow: auto;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 240px;\n    background-size: 100% 400px;\n    background-image: url(${tablet});\n  }\n\n  @media screen and (min-width: 1280px) {\n    padding-top: 150px;\n    background-size: 100% 390px;\n    background-image: url(${desktop});\n  }\n`;\n\nexport const ContentWrapper = styled.div`\n  width: 280px;\n  padding: 40px 0 40px 0;\n  margin-right: auto;\n  margin-left: auto;\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    min-height: 300px;\n    padding: 60px 80px 40px 80px;\n    background-color: #fff;\n    border-radius: 40px;\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 618px;\n    padding: 60px 80px 60px 80px;\n  }\n`;\n\nexport const Switcher = styled.p`\n  margin-top: 40px;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.3;\n  text-align: center;\n`;\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAuth } from 'redux/auth/authSelectors';\nimport { loginUser } from 'redux/auth/authOperations';\nimport { Navigate } from 'react-router-dom';\nimport { Loader } from 'components';\nimport { Input, ErrorText, Button } from 'components/RegisterForm/Forms.styled';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .min(10)\n    .max(63)\n    .matches(\n      /^[^-n]+[a-zA-Z0-9.,!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9]+)*$/,\n      'Email must not contain the \"-\" as a first or last character'\n    )\n    .email()\n    .required(),\n  password: yup\n    .string()\n    .min(7)\n    .max(32)\n    .matches(\n      /^[a-zA-Z0-9]*$/,\n      'Password must contain only letters and/or numbers'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    const response = dispatch(loginUser({ email: email, password: password }));\n    if (response.success) {\n      return <Navigate to=\"/user\" replace />;\n    }\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Field type=\"email\" name=\"email\" placeholder=\"Email\" as={Input} />\n        <ErrorMessage name=\"email\">\n          {msg => <ErrorText>{msg}</ErrorText>}\n        </ErrorMessage>\n        <Field\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          as={Input}\n        />\n        <ErrorMessage name=\"password\">\n          {msg => <ErrorText>{msg}</ErrorText>}\n        </ErrorMessage>\n        <Button color=\"accent\" type=\"submit\">\n          {!isLoading ? 'Login' : <Loader />}\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport { Link } from 'react-router-dom';\n\nimport { Typography } from '@mui/material';\nimport { Background, ContentWrapper, Switcher } from './LoginPage.styled';\n\nfunction LoginPage() {\n  return (\n    <Background>\n      <ContentWrapper>\n        <Typography sx={{ textAlign: 'center', mb: '40px' }} variant=\"h3\">\n          Login\n        </Typography>\n        <LoginForm />\n        <Switcher>\n          Don't have an account? <Link to=\"/register\">Register</Link>\n        </Switcher>\n      </ContentWrapper>\n    </Background>\n  );\n}\n\nexport default LoginPage;\n","import LoginPage from './LoginPage';\n\nexport default LoginPage;\n"],"names":["Input","styled","ErrorText","Button","props","color","Background","mobile","tablet","desktop","ContentWrapper","Switcher","schema","yup","shape","email","min","max","matches","required","password","initialValues","dispatch","useDispatch","isLoading","useSelector","getAuth","validationSchema","onSubmit","values","resetForm","loginUser","success","to","replace","type","name","placeholder","as","msg","Typography","sx","textAlign","mb","variant"],"sourceRoot":""}