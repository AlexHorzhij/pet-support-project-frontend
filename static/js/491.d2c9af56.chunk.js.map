{"version":3,"file":"static/js/491.d2c9af56.chunk.js","mappings":"iWAkBMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,SAAUF,EAAAA,KAEPG,IAAI,GACJC,IAAI,IACJC,QACC,iBACA,2DAEDC,WACHC,gBAAiBP,EAAAA,KAEdQ,MAAM,CAACR,EAAAA,GAAQ,YAAa,MAAO,wBACnCG,IAAI,GACJC,IAAI,IACJE,aAmFL,EAhF0B,SAAH,GAA+B,IAAzBG,EAAiB,EAAjBA,kBACnBC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UACFG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,WAAS,GAAM,eAAhDC,EAAY,KAAEC,EAAe,KACpC,GAAgDF,EAAAA,EAAAA,WAAS,GAAM,eAAxDG,EAAgB,KAAEC,EAAmB,KAsB5C,OACE,SAAC,KAAM,CACLC,cAAe,CAAEC,MAAO,IACxBC,iBAAkBzB,EAClB0B,SAdkB,SAAH,GAAsB,IAAhBvB,EAAQ,EAARA,SACvBW,GACEa,EAAAA,EAAAA,IAAkB,CAChBC,KAAM,CAAEzB,SAAUA,GAClB0B,WAAYnB,KAGhBM,EAAS,SACX,EAM4B,UAExB,UAAC,KAAI,YACH,UAACc,EAAA,EAAG,CAACC,GAAI,CAAEC,SAAU,YAAa,WAChC,SAAC,KAAW,CACVC,KAAMd,EAAe,OAAS,WAC9Be,KAAK,WACLC,YAAY,WACZC,iBAAiB,UAEnB,SAAC,KAAgB,CACf,aAAW,6BACXC,QApCsB,WAAH,OAASjB,GAAgB,SAAAkB,GAAI,OAAKA,CAAI,GAAE,EAqC3DC,YApCsB,SAAAC,GAC9BA,EAAMC,gBACR,EAmCUC,KAAK,MAAK,SAETvB,GAAe,SAACwB,EAAA,EAAa,KAAM,SAACC,EAAA,EAAU,OAEjD,SAAC,KAAY,CAACC,UAAU,MAAMX,KAAK,WAAU,SAC1C,SAAAY,GAAG,OAAI,UAAC,IAAS,WAAC,IAAEA,IAAgB,QAGzC,UAAChB,EAAA,EAAG,CAACC,GAAI,CAAEC,SAAU,YAAa,WAChC,SAAC,KAAW,CACVC,KAAMZ,EAAmB,OAAS,WAClCa,KAAK,kBACLC,YAAY,mBACZC,iBAAiB,UAEnB,SAAC,KAAgB,CACf,aAAW,oCACXC,QAlD0B,WAAH,OAASf,GAAoB,SAAAgB,GAAI,OAAKA,CAAI,GAAE,EAmDnEC,YAlD0B,SAAAC,GAClCA,EAAMC,gBACR,EAiDUC,KAAK,MAAK,SAETrB,GAAmB,SAACsB,EAAA,EAAa,KAAM,SAACC,EAAA,EAAU,OAErD,SAAC,KAAY,CAACC,UAAU,MAAMX,KAAK,kBAAiB,SACjD,SAAAY,GAAG,OAAI,UAAC,IAAS,WAAC,IAAEA,IAAgB,QAGzC,SAAC,KAAU,CAACC,QAAQ,YAAYd,KAAK,SAASF,GAAI,CAAEiB,GAAI,GAAI,SACxDrC,GAAsB,SAACsC,EAAA,GAAW,IAAtB,cAKxB,ECzGe,SAASC,IACtB,IAAQxC,GAAsByC,EAAAA,EAAAA,MAAtBzC,kBAER,OACE,SAAC,KAAa,WACZ,UAAC,KAAc,YACb,SAAC0C,EAAA,EAAU,CAACL,QAAQ,KAAKhB,GAAI,CAAEsB,GAAI,GAAI,SAAC,6BAGxC,SAAC,EAAiB,CAAC3C,kBAAmBA,QAI9C,C","sources":["components/ForgotPassword/ResetPasswordForm.js","pages/ResetPasswordPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { LoaderWhite } from 'components/Loader/Loader';\nimport { getAuth } from 'redux/auth/authSelectors';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport {\n  StyledInput,\n  ErrorText,\n  FormButton,\n  StyledIconButton,\n} from 'components/RegisterForm/Forms.styled';\nimport { Box } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { resetUserPassword } from 'redux/auth/authOperations';\n\nconst schema = yup.object().shape({\n  password: yup\n    .string()\n    .min(7)\n    .max(32)\n    .matches(\n      /^[a-zA-Z0-9]*$/,\n      'Password must contain only latin letters and/or numbers'\n    )\n    .required(),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .min(7)\n    .max(32)\n    .required(),\n});\n\nconst ResetPasswordForm = ({ confirmationToken }) => {\n  const { isLoading } = useSelector(getAuth);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfPassword, setShowConfPassword] = useState(false);\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const handleClickShowConfPassword = () => setShowConfPassword(show => !show);\n  const handleMouseDownConfPassword = event => {\n    event.preventDefault();\n  };\n\n  const onResendClick = ({ password }) => {\n    dispatch(\n      resetUserPassword({\n        body: { password: password },\n        resetToken: confirmationToken,\n      })\n    );\n    navigate('/login');\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '' }}\n      validationSchema={schema}\n      onSubmit={onResendClick}\n    >\n      <Form>\n        <Box sx={{ position: 'relative' }}>\n          <StyledInput\n            type={showPassword ? 'text' : 'password'}\n            name=\"password\"\n            placeholder=\"Password\"\n            disableunderline=\"true\"\n          />\n          <StyledIconButton\n            aria-label=\"toggle password visibility\"\n            onClick={handleClickShowPassword}\n            onMouseDown={handleMouseDownPassword}\n            edge=\"end\"\n          >\n            {showPassword ? <VisibilityOff /> : <Visibility />}\n          </StyledIconButton>\n          <ErrorMessage component=\"div\" name=\"password\">\n            {msg => <ErrorText>*{msg}</ErrorText>}\n          </ErrorMessage>\n        </Box>\n        <Box sx={{ position: 'relative' }}>\n          <StyledInput\n            type={showConfPassword ? 'text' : 'password'}\n            name=\"confirmPassword\"\n            placeholder=\"Confirm Password\"\n            disableunderline=\"true\"\n          />\n          <StyledIconButton\n            aria-label=\"toggle confirmPassword visibility\"\n            onClick={handleClickShowConfPassword}\n            onMouseDown={handleMouseDownConfPassword}\n            edge=\"end\"\n          >\n            {showConfPassword ? <VisibilityOff /> : <Visibility />}\n          </StyledIconButton>\n          <ErrorMessage component=\"div\" name=\"confirmPassword\">\n            {msg => <ErrorText>*{msg}</ErrorText>}\n          </ErrorMessage>\n        </Box>\n        <FormButton variant=\"contained\" type=\"submit\" sx={{ mt: 0 }}>\n          {!isLoading ? 'Reset' : <LoaderWhite />}\n        </FormButton>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ResetPasswordForm;\n","import { Typography } from '@mui/material';\nimport React from 'react';\nimport {\n  AuthContainer,\n  ContentWrapper,\n} from 'pages/LoginPage/LoginPage.styled';\nimport ResetPasswordForm from 'components/ForgotPassword/ResetPasswordForm';\nimport { useParams } from 'react-router-dom';\n\nexport default function ResetPasswordPage() {\n  const { confirmationToken } = useParams();\n\n  return (\n    <AuthContainer>\n      <ContentWrapper>\n        <Typography variant=\"h3\" sx={{ mb: 3 }}>\n          Enter your new password\n        </Typography>\n        <ResetPasswordForm confirmationToken={confirmationToken} />\n      </ContentWrapper>\n    </AuthContainer>\n  );\n}\n"],"names":["schema","yup","shape","password","min","max","matches","required","confirmPassword","oneOf","confirmationToken","isLoading","useSelector","getAuth","dispatch","useDispatch","navigate","useNavigate","useState","showPassword","setShowPassword","showConfPassword","setShowConfPassword","initialValues","email","validationSchema","onSubmit","resetUserPassword","body","resetToken","Box","sx","position","type","name","placeholder","disableunderline","onClick","show","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","component","msg","variant","mt","Loader","ResetPasswordPage","useParams","Typography","mb"],"sourceRoot":""}