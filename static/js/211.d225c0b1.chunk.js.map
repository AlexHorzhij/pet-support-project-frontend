{"version":3,"file":"static/js/211.d225c0b1.chunk.js","mappings":"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","sources":["components/RegisterForm/StepOne.js","components/RegisterForm/StepTwo.js","components/RegisterForm/RegisterForm.js","pages/RegisterPage.js"],"sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .min(10)\n    .max(63)\n    .matches(\n      /^[^-n]+[a-zA-Z0-9.,!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9]+)*$/,\n      'Email must not contain the \"-\" as a first or last character'\n    )\n    .email()\n    .required(),\n  password: yup\n    .string()\n    .min(7)\n    .max(32)\n    .matches(\n      /^[a-zA-Z0-9]*$/,\n      'Password must contain only letters and/or numbers'\n    )\n    .required(),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .min(7)\n    .max(32)\n    .required(),\n});\n\nconst StepOne = ({ next, data }) => {\n  const handleSubmit = values => {\n    next(values);\n  };\n\n  return (\n    <Formik\n      initialValues={data}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n        <ErrorMessage component=\"div\" name=\"email\" />\n        <Field type=\"password\" name=\"password\" placeholder=\"Password\" />\n        <ErrorMessage component=\"div\" name=\"password\" />\n        <Field\n          type=\"password\"\n          name=\"confirmPassword\"\n          placeholder=\"Confirm Password\"\n        />\n        <ErrorMessage component=\"div\" name=\"confirmPassword\" />\n        <button type=\"submit\">Next</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default StepOne;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { getAuth } from 'redux/auth/authSelectors';\nimport { Loader } from 'components';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  city: yup\n    .string()\n    .matches(\n      /^[A-Z][a-z]+,\\s+[A-Z][a-z]*$/,\n      'Begin with capital letters, contain comma and space'\n    )\n    .required(),\n  phone: yup\n    .string()\n    .min(13)\n    .max(13)\n    .matches(\n      /^[+][3][8][0]+[0-9]*$/,\n      'Phone must contain only numbers and start with \"+380\"'\n    )\n    .required(),\n});\n\nconst StepTwo = ({ next, prev, data }) => {\n  const handleSubmit = (values, { resetForm }) => {\n    next(values, true);\n    resetForm();\n  };\n  const { isLoading } = useSelector(getAuth);\n\n  return (\n    <Formik\n      initialValues={data}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {({ values }) => {\n        return (\n          <Form>\n            <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n            <ErrorMessage component=\"div\" name=\"name\" />\n            <Field type=\"text\" name=\"city\" placeholder=\"City, Region\" />\n            <ErrorMessage component=\"div\" name=\"city\" />\n            <Field type=\"tel\" name=\"phone\" placeholder=\"Mobile phone\" />\n            <ErrorMessage component=\"div\" name=\"phone\" />\n            <button type=\"submit\">\n              {!isLoading ? 'Register' : <Loader />}\n            </button>\n            <button type=\"button\" onClick={() => prev(values)}>\n              Back\n            </button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default StepTwo;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from 'redux/auth/authOperations';\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\n\nconst RegisterForm = () => {\n  const [data, setData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    name: '',\n    city: '',\n    phone: '',\n  });\n  const [currentStep, setCurrentStep] = useState(0);\n  const dispatch = useDispatch();\n\n  const handleNextStep = (newData, final = false) => {\n    setData(prev => ({ ...prev, ...newData }));\n\n    if (final) {\n      dispatch(\n        registerUser({\n          email: newData.email,\n          password: newData.password,\n          name: newData.name,\n          city: newData.city,\n          phone: newData.phone,\n        })\n      );\n\n      return;\n    }\n\n    setCurrentStep(prev => prev + 1);\n  };\n\n  const handlePrevStep = newData => {\n    setData(prev => ({ ...prev, ...newData }));\n    setCurrentStep(prev => prev - 1);\n  };\n\n  const steps = [\n    <StepOne next={handleNextStep} data={data} />,\n    <StepTwo next={handleNextStep} prev={handlePrevStep} data={data} />,\n  ];\n\n  return <>{steps[currentStep]}</>;\n};\n\nexport default RegisterForm;\n","import React from 'react';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { Link } from 'react-router-dom';\n\nfunction RegisterPage() {\n  return (\n    <div>\n      <h2>Register</h2>\n      <RegisterForm />\n      <p>\n        Already have an account? <Link to=\"/login\">Login</Link>\n      </p>\n    </div>\n  );\n}\n\nexport default RegisterPage;\n"],"names":["schema","yup","shape","email","min","max","matches","required","password","confirmPassword","oneOf","next","data","initialValues","validationSchema","onSubmit","values","type","name","placeholder","component","city","phone","prev","isLoading","useSelector","getAuth","resetForm","onClick","useState","setData","currentStep","setCurrentStep","dispatch","useDispatch","handleNextStep","newData","final","registerUser","steps","to"],"sourceRoot":""}