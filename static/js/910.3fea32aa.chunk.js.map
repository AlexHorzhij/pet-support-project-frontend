{"version":3,"file":"static/js/910.3fea32aa.chunk.js","mappings":"mUAoBMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJG,IAAI,GACJC,IAAI,IACJC,QACC,kFACA,+DAEDH,QACAI,aAGU,SAASC,IACtB,IAAQC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UACFG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAUjB,OACE,SAAC,KAAa,WACZ,UAAC,KAAc,YACb,SAAC,IAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,GAAI,GAAI,SAAC,qEAGxC,SAAC,KAAU,CACTF,QAAQ,YACRG,QAZa,WACnBL,EAAS,SACX,EAWQG,GAAI,CAAEG,GAAI,EAAGF,GAAI,GAAI,SACtB,WAGD,SAAC,IAAU,CAACF,QAAQ,KAAKC,GAAI,CAAEC,GAAI,GAAI,SAAC,yDAGxC,SAAC,KAAM,CACLG,cAAe,CAAElB,MAAO,IACxBmB,iBAAkBtB,EAClBuB,SA3Bc,SAAH,GAAmB,IAAbpB,EAAK,EAALA,MACvBS,GAASY,EAAAA,EAAAA,IAAwB,CAAErB,MAAOA,IAC5C,EAyBgC,UAExB,UAAC,KAAI,YACH,UAAC,IAAG,CAACc,GAAI,CAAEQ,SAAU,YAAa,WAChC,SAAC,KAAW,CACVC,KAAK,QACLC,KAAK,QACLC,YAAY,QACZC,iBAAiB,UAEnB,SAAC,KAAY,CAACF,KAAK,QAAO,SACvB,SAAAG,GAAG,OAAI,UAAC,IAAS,WAAC,IAAEA,IAAgB,QAGzC,SAAC,KAAU,CAACd,QAAQ,YAAYU,KAAK,SAAST,GAAI,CAAEG,GAAI,GAAI,SACxDX,GAAuB,SAAC,KAAW,IAAvB,oBAO5B,C","sources":["pages/ResendEmailPage.js"],"sourcesContent":["import { Typography, Box } from '@mui/material';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { resendVerificationEmail } from 'redux/auth/authOperations';\nimport { useSelector } from 'react-redux';\nimport {\n  StyledInput,\n  ErrorText,\n  FormButton,\n} from 'components/RegisterForm/Forms.styled';\nimport {\n  AuthContainer,\n  ContentWrapper,\n} from 'pages/LoginPage/LoginPage.styled';\nimport { Form, Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { LoaderWhite } from 'components/Loader/Loader';\nimport { getAuth } from 'redux/auth/authSelectors';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .min(8)\n    .max(63)\n    .matches(\n      /^[^-n]+[a-zA-Z0-9.,!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9]+)*$/,\n      'Email must not contain the \"-\" as a first or last character'\n    )\n    .email()\n    .required(),\n});\n\nexport default function ResendEmailPage() {\n  const { isLoading } = useSelector(getAuth);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onResendClick = ({ email }) => {\n    dispatch(resendVerificationEmail({ email: email }));\n  };\n\n  const onLoginClick = () => {\n    navigate('/login');\n  };\n\n  return (\n    <AuthContainer>\n      <ContentWrapper>\n        <Typography variant=\"h3\" sx={{ mb: 3 }}>\n          You can log in after confirming your email. Check your mailbox!\n        </Typography>\n        <FormButton\n          variant=\"contained\"\n          onClick={onLoginClick}\n          sx={{ mt: 0, mb: 2 }}\n        >\n          Login\n        </FormButton>\n        <Typography variant=\"h3\" sx={{ mb: 5 }}>\n          If you did not receive the letter, we can resend it\n        </Typography>\n        <Formik\n          initialValues={{ email: '' }}\n          validationSchema={schema}\n          onSubmit={onResendClick}\n        >\n          <Form>\n            <Box sx={{ position: 'relative' }}>\n              <StyledInput\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n                disableunderline=\"true\"\n              />\n              <ErrorMessage name=\"email\">\n                {msg => <ErrorText>*{msg}</ErrorText>}\n              </ErrorMessage>\n            </Box>\n            <FormButton variant=\"contained\" type=\"submit\" sx={{ mt: 0 }}>\n              {!isLoading ? 'Resend' : <LoaderWhite />}\n            </FormButton>\n          </Form>\n        </Formik>\n      </ContentWrapper>\n    </AuthContainer>\n  );\n}\n"],"names":["schema","yup","shape","email","min","max","matches","required","ResendEmailPage","isLoading","useSelector","getAuth","dispatch","useDispatch","navigate","useNavigate","variant","sx","mb","onClick","mt","initialValues","validationSchema","onSubmit","resendVerificationEmail","position","type","name","placeholder","disableunderline","msg"],"sourceRoot":""}