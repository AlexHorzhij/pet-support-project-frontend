{"version":3,"file":"static/js/482.53b8c3e9.chunk.js","mappings":"kRAmEA,EA3DkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCG,EAAQ,KAAEC,EAAW,KAEtBC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAEd,OAAQD,GACN,IAAK,YACHN,EAASO,GACT,MACF,IAAK,eACHL,EAAYK,GACZ,MACF,QACEP,EAAS,IACTE,EAAY,IAElB,EAEMM,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFG,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAQ,GAAE,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAQ,GAAE,IAE3C,OACE,kBAAME,SAVa,SAAAb,GACnBA,EAAEc,iBAEFV,GAASW,EAAAA,EAAAA,IAAU,CAAEpB,MAAOA,EAAOE,SAAUA,IAC/C,EAM+B,WAC3B,kBAAOmB,QAASP,EAAQ,SAAC,WACzB,kBACEQ,GAAIR,EACJS,KAAK,QACLhB,KAAK,YACLC,MAAOR,EACPwB,SAAUpB,EACVqB,UAAQ,EACRC,YAAY,gBAEd,kBAAOL,QAASJ,EAAW,SAAC,cAC5B,kBACEK,GAAIL,EACJM,KAAK,WACLhB,KAAK,eACLC,MAAON,EACPsB,SAAUpB,EACVqB,UAAQ,EACRC,YAAY,kBAEZf,GAAmD,SAACgB,EAAA,EAAM,KAA9C,mBAAQJ,KAAK,SAAQ,SAAC,YAG1C,E,UClDA,MAXA,WACE,OACE,4BACE,SAAC,EAAS,KACV,yBAAG,2BACsB,SAAC,KAAI,CAACK,GAAG,YAAW,SAAC,kBAIpD,C,uDCbO,IAAMf,EAAU,SAACgB,GAAK,OAAKA,EAAMC,IAAK,C,wDCCtC,IAkBId,EAAS,WAAH,IAAIe,EAAO,UAAH,6CAAG,GAAE,OAC5BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACb,EAAIc,GAWvD,OAREd,IAFFc,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/LoginForm/LoginForm.js","pages/LoginPage.js","redux/auth/authSelectors.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuth } from 'redux/auth/authSelectors';\nimport { loginUser } from 'redux/auth/authOperations';\n\nimport { Loader } from 'components/Loader/Loader';\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'userEmail':\n        setEmail(value);\n        break;\n      case 'userPassword':\n        setPassword(value);\n        break;\n      default:\n        setEmail('');\n        setPassword('');\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(loginUser({ email: email, password: password }));\n  };\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={emailId}>Email</label>\n      <input\n        id={emailId}\n        type=\"email\"\n        name=\"userEmail\"\n        value={email}\n        onChange={handleChange}\n        required\n        placeholder=\"your_email\"\n      />\n      <label htmlFor={passwordId}>Password</label>\n      <input\n        id={passwordId}\n        type=\"password\"\n        name=\"userPassword\"\n        value={password}\n        onChange={handleChange}\n        required\n        placeholder=\"your_password\"\n      />\n      {!isLoading ? <button type=\"submit\">Login</button> : <Loader />}\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport { Link } from 'react-router-dom';\n\nfunction LoginPage() {\n  return (\n    <div>\n      <LoginForm />\n      <p>\n        Don't have an account? <Link to=\"/register\">Register</Link>\n      </p>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","export const getAuth = (state) => state.auth;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","dispatch","useDispatch","isLoading","useSelector","getAuth","emailId","useMemo","nanoid","passwordId","onSubmit","preventDefault","loginUser","htmlFor","id","type","onChange","required","placeholder","Loader","to","state","auth","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}